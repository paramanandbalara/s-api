// Import the necessary module for generating cryptographic hashes
const crypto = require('crypto');
const axios = require('axios');
const SHYPMAX_JSON = require('../../shyptrack-static/shypmax.json');

/**
 * Generates authentication headers for Shypmax API requests
 * @returns {Object} Headers object which includes necessary parameters for API authentication
 * @throws {Error} If an error occurs during header generation
 */
const generateAuthHeaders = () => {
    try {
        // Get the current timestamp
        const timestamp = +new Date();

        // Get the API keys and ID from the configuration file
        const { SECRET_KEY, PUBLIC_KEY, APP_ID } = SHYPMAX_JSON;

        // Generate the string that will be hashed
        const stringToHash = `key:${PUBLIC_KEY}id:${APP_ID}:timestamp:${timestamp}`;

        // Generate the token by hashing the string with the secret key using SHA-256 algorithm
        const hash = crypto
            .createHmac('sha256', SECRET_KEY)
            .update(stringToHash)
            .digest('base64');

        // Return the headers object which includes necessary parameters for API authentication
        return {
            'Content-type': 'application/json', // MIME type for request payload
            'authorization': hash, // Authentication token generated by hashing the string
            "x-appid": APP_ID, // Application ID used for API authentication
            "x-timestamp": timestamp, // Current timestamp used for API authentication
        };
    } catch (exception) {
        console.error(exception);
        // If an error occurs, log the error and throw an exception with a custom message
        throw new Error(`Failed to generate Shypmax API authentication headers: ${exception.message}`);
    }
};

/**
 * Generates a config object for sending a request to Shypmax API
 * @param {Object} data - Request payload
 * @param {string} method - HTTP method (e.g. GET, POST, PUT, DELETE)
 * @param {string} url - API endpoint URL
 * @returns {Object} Config object for sending a request to Shypmax API
 */
const generateRequestConfig = (url, method, data) => {
    const headers = generateAuthHeaders()
    const config = {
        method,
        url,
        headers,
        data
    };
    return config;
};

/**
 * Sends a request to Shypmax API and returns the response data
 * @param {Object} data - Request payload
 * @param {string} method - HTTP method (e.g. GET, POST, PUT, DELETE)
 * @param {string} url - API endpoint URL
 * @returns {Object} Response data from Shypmax API
 * @throws {Error} If an error occurs during API request
 */
const getDataFromShypmax = async (url, method, data = {}) => {
    try {
        const config = generateRequestConfig(url, method, data)
        const res = await axios(config)
        if (res?.data?.success) {
            return res.data.data;
        }
        throw new Error(`Something went wrong while fetching details, Please contact technical support :- ${res?.data?.message}`);
    } catch (exception) {
        console.error(exception)
        throw new Error(`Something went wrong while fetching details, Please contact technical support`)
    }
};

module.exports = { getDataFromShypmax };
